// Code generated by protoc-gen-go.
// source: cmd.proto
// DO NOT EDIT!

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	cmd.proto
	cmds.proto

It has these top-level messages:
	Cmd
	Cmds
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cmd_Cmd int32

const (
	Cmd_CMD_CLOSE Cmd_Cmd = 0
	Cmd_CMD_RAW   Cmd_Cmd = 1
	Cmd_CMD_PWR   Cmd_Cmd = 2
	Cmd_CMD_VOL   Cmd_Cmd = 3
	Cmd_CMD_SRC   Cmd_Cmd = 4
)

var Cmd_Cmd_name = map[int32]string{
	0: "CMD_CLOSE",
	1: "CMD_RAW",
	2: "CMD_PWR",
	3: "CMD_VOL",
	4: "CMD_SRC",
}
var Cmd_Cmd_value = map[string]int32{
	"CMD_CLOSE": 0,
	"CMD_RAW":   1,
	"CMD_PWR":   2,
	"CMD_VOL":   3,
	"CMD_SRC":   4,
}

func (x Cmd_Cmd) Enum() *Cmd_Cmd {
	p := new(Cmd_Cmd)
	*p = x
	return p
}
func (x Cmd_Cmd) String() string {
	return proto.EnumName(Cmd_Cmd_name, int32(x))
}
func (x *Cmd_Cmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_Cmd_value, data, "Cmd_Cmd")
	if err != nil {
		return err
	}
	*x = Cmd_Cmd(value)
	return nil
}
func (Cmd_Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Cmd_PwrValue int32

const (
	Cmd_PWR_OFF Cmd_PwrValue = 1
	Cmd_PWR_ON  Cmd_PwrValue = 2
)

var Cmd_PwrValue_name = map[int32]string{
	1: "PWR_OFF",
	2: "PWR_ON",
}
var Cmd_PwrValue_value = map[string]int32{
	"PWR_OFF": 1,
	"PWR_ON":  2,
}

func (x Cmd_PwrValue) Enum() *Cmd_PwrValue {
	p := new(Cmd_PwrValue)
	*p = x
	return p
}
func (x Cmd_PwrValue) String() string {
	return proto.EnumName(Cmd_PwrValue_name, int32(x))
}
func (x *Cmd_PwrValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_PwrValue_value, data, "Cmd_PwrValue")
	if err != nil {
		return err
	}
	*x = Cmd_PwrValue(value)
	return nil
}
func (Cmd_PwrValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Cmd_VolValue int32

const (
	Cmd_VOL_UP        Cmd_VolValue = 1
	Cmd_VOL_DOWN      Cmd_VolValue = 2
	Cmd_VOL_UP_FAST   Cmd_VolValue = 3
	Cmd_VOL_DOWN_FAST Cmd_VolValue = 4
)

var Cmd_VolValue_name = map[int32]string{
	1: "VOL_UP",
	2: "VOL_DOWN",
	3: "VOL_UP_FAST",
	4: "VOL_DOWN_FAST",
}
var Cmd_VolValue_value = map[string]int32{
	"VOL_UP":        1,
	"VOL_DOWN":      2,
	"VOL_UP_FAST":   3,
	"VOL_DOWN_FAST": 4,
}

func (x Cmd_VolValue) Enum() *Cmd_VolValue {
	p := new(Cmd_VolValue)
	*p = x
	return p
}
func (x Cmd_VolValue) String() string {
	return proto.EnumName(Cmd_VolValue_name, int32(x))
}
func (x *Cmd_VolValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_VolValue_value, data, "Cmd_VolValue")
	if err != nil {
		return err
	}
	*x = Cmd_VolValue(value)
	return nil
}
func (Cmd_VolValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

type Cmd_SrcValue int32

const (
	Cmd_SRC_TV       Cmd_SrcValue = 1
	Cmd_SRC_DVD      Cmd_SrcValue = 2
	Cmd_SRC_VCR1     Cmd_SrcValue = 3
	Cmd_SRC_DSS_VCR2 Cmd_SrcValue = 5
	Cmd_SRC_AUX1     Cmd_SrcValue = 9
	Cmd_SRC_AUX2     Cmd_SrcValue = 10
	Cmd_SRC_CD_CDR   Cmd_SrcValue = 12
	Cmd_SRC_TAPE     Cmd_SrcValue = 14
	Cmd_SRC_TUNER1   Cmd_SrcValue = 15
	Cmd_SRC_FM1      Cmd_SrcValue = 16
	Cmd_SRC_AM1      Cmd_SrcValue = 17
	Cmd_SRC_XM1      Cmd_SrcValue = 19
)

var Cmd_SrcValue_name = map[int32]string{
	1:  "SRC_TV",
	2:  "SRC_DVD",
	3:  "SRC_VCR1",
	5:  "SRC_DSS_VCR2",
	9:  "SRC_AUX1",
	10: "SRC_AUX2",
	12: "SRC_CD_CDR",
	14: "SRC_TAPE",
	15: "SRC_TUNER1",
	16: "SRC_FM1",
	17: "SRC_AM1",
	19: "SRC_XM1",
}
var Cmd_SrcValue_value = map[string]int32{
	"SRC_TV":       1,
	"SRC_DVD":      2,
	"SRC_VCR1":     3,
	"SRC_DSS_VCR2": 5,
	"SRC_AUX1":     9,
	"SRC_AUX2":     10,
	"SRC_CD_CDR":   12,
	"SRC_TAPE":     14,
	"SRC_TUNER1":   15,
	"SRC_FM1":      16,
	"SRC_AM1":      17,
	"SRC_XM1":      19,
}

func (x Cmd_SrcValue) Enum() *Cmd_SrcValue {
	p := new(Cmd_SrcValue)
	*p = x
	return p
}
func (x Cmd_SrcValue) String() string {
	return proto.EnumName(Cmd_SrcValue_name, int32(x))
}
func (x *Cmd_SrcValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_SrcValue_value, data, "Cmd_SrcValue")
	if err != nil {
		return err
	}
	*x = Cmd_SrcValue(value)
	return nil
}
func (Cmd_SrcValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

type Cmd struct {
	Cmd              *Cmd_Cmd      `protobuf:"varint,1,req,name=cmd,enum=msg.Cmd_Cmd" json:"cmd,omitempty"`
	IntValue         *int32        `protobuf:"varint,2,opt,name=intValue" json:"intValue,omitempty"`
	StrValue         *string       `protobuf:"bytes,3,opt,name=strValue" json:"strValue,omitempty"`
	Pwr              *Cmd_PwrValue `protobuf:"varint,4,opt,name=pwr,enum=msg.Cmd_PwrValue" json:"pwr,omitempty"`
	Vol              *Cmd_VolValue `protobuf:"varint,5,opt,name=vol,enum=msg.Cmd_VolValue" json:"vol,omitempty"`
	Src              *Cmd_SrcValue `protobuf:"varint,6,opt,name=src,enum=msg.Cmd_SrcValue" json:"src,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Cmd) Reset()                    { *m = Cmd{} }
func (m *Cmd) String() string            { return proto.CompactTextString(m) }
func (*Cmd) ProtoMessage()               {}
func (*Cmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Cmd) GetCmd() Cmd_Cmd {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return Cmd_CMD_CLOSE
}

func (m *Cmd) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Cmd) GetStrValue() string {
	if m != nil && m.StrValue != nil {
		return *m.StrValue
	}
	return ""
}

func (m *Cmd) GetPwr() Cmd_PwrValue {
	if m != nil && m.Pwr != nil {
		return *m.Pwr
	}
	return Cmd_PWR_OFF
}

func (m *Cmd) GetVol() Cmd_VolValue {
	if m != nil && m.Vol != nil {
		return *m.Vol
	}
	return Cmd_VOL_UP
}

func (m *Cmd) GetSrc() Cmd_SrcValue {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return Cmd_SRC_TV
}

func init() {
	proto.RegisterType((*Cmd)(nil), "msg.Cmd")
	proto.RegisterEnum("msg.Cmd_Cmd", Cmd_Cmd_name, Cmd_Cmd_value)
	proto.RegisterEnum("msg.Cmd_PwrValue", Cmd_PwrValue_name, Cmd_PwrValue_value)
	proto.RegisterEnum("msg.Cmd_VolValue", Cmd_VolValue_name, Cmd_VolValue_value)
	proto.RegisterEnum("msg.Cmd_SrcValue", Cmd_SrcValue_name, Cmd_SrcValue_value)
}

func init() { proto.RegisterFile("cmd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x8f, 0xc1, 0x6e, 0x9b, 0x40,
	0x10, 0x86, 0xbb, 0xac, 0x9d, 0xe2, 0x09, 0x21, 0xe3, 0xed, 0x05, 0xf5, 0x50, 0x21, 0x72, 0xe1,
	0x64, 0x09, 0xde, 0x00, 0x2d, 0x46, 0x39, 0x18, 0x83, 0x16, 0x0c, 0xb9, 0xa1, 0x0a, 0xaa, 0xa8,
	0x12, 0x94, 0x08, 0xdc, 0xe4, 0xc5, 0x7a, 0xec, 0xc3, 0x55, 0x13, 0xb2, 0x56, 0xe5, 0xc3, 0x4a,
	0xf3, 0xcd, 0xf7, 0x6b, 0x76, 0x06, 0x36, 0xed, 0xd0, 0xed, 0x5e, 0xa6, 0xf1, 0x3c, 0x0a, 0x3e,
	0xcc, 0xcf, 0xde, 0xdf, 0x15, 0x70, 0x39, 0x74, 0xe2, 0x1b, 0xf0, 0x76, 0xe8, 0x1c, 0xe6, 0x1a,
	0xbe, 0x1d, 0x5a, 0xbb, 0x61, 0x7e, 0xde, 0xc9, 0xa1, 0xa3, 0xa7, 0x48, 0x88, 0xaf, 0x60, 0xfe,
	0xfc, 0x75, 0xae, 0xbe, 0xf7, 0xbf, 0x7f, 0x38, 0x86, 0xcb, 0xfc, 0xb5, 0xba, 0x30, 0xb9, 0xf9,
	0x3c, 0x2d, 0x8e, 0xbb, 0xcc, 0xdf, 0xa8, 0x0b, 0x8b, 0x07, 0xe0, 0x2f, 0x6f, 0x93, 0xb3, 0x72,
	0x99, 0x6f, 0x87, 0xdb, 0xcb, 0xdc, 0xfc, 0x6d, 0xf1, 0x8a, 0x2c, 0x85, 0x5e, 0xc7, 0xde, 0x59,
	0x5f, 0x85, 0xaa, 0xb1, 0xff, 0x08, 0xbd, 0x8e, 0x3d, 0x85, 0xe6, 0xa9, 0x75, 0x6e, 0xae, 0x42,
	0xc5, 0xd4, 0x7e, 0x84, 0xe6, 0xa9, 0xf5, 0x1e, 0x97, 0x6b, 0xee, 0x60, 0x23, 0xd3, 0xb8, 0x91,
	0x87, 0xac, 0xd8, 0xe3, 0x27, 0x71, 0x0b, 0x9f, 0x09, 0x55, 0x54, 0x23, 0xd3, 0x90, 0xd7, 0x0a,
	0x0d, 0x0d, 0x55, 0x76, 0x40, 0xae, 0xa1, 0x50, 0x12, 0x57, 0xde, 0x03, 0x98, 0x7a, 0x49, 0x12,
	0x79, 0xad, 0x9a, 0x2c, 0x49, 0x90, 0x09, 0x80, 0x9b, 0x77, 0x38, 0xa2, 0xe1, 0x3d, 0x82, 0xa9,
	0x97, 0xa4, 0x7e, 0x95, 0x1d, 0x9a, 0x53, 0x8e, 0x4c, 0x58, 0x60, 0x52, 0x1d, 0x67, 0xf5, 0x11,
	0x0d, 0x71, 0x0f, 0xb7, 0x8b, 0x69, 0x92, 0xa8, 0x28, 0x91, 0x8b, 0x2d, 0xdc, 0x69, 0xbd, 0xb4,
	0x56, 0xde, 0x1f, 0x06, 0xa6, 0x3e, 0x85, 0x46, 0x15, 0x4a, 0x36, 0x65, 0xb5, 0xac, 0x4b, 0x75,
	0x5c, 0xc5, 0x68, 0xd0, 0x5c, 0x82, 0x4a, 0xaa, 0x00, 0xb9, 0x40, 0xb0, 0xde, 0x55, 0x51, 0x50,
	0x27, 0xc4, 0xb5, 0xf6, 0xd1, 0xe9, 0x29, 0xc0, 0xcd, 0x7f, 0x14, 0x22, 0x08, 0x1b, 0x80, 0x48,
	0xc6, 0x8d, 0x8c, 0x15, 0x5a, 0xda, 0x96, 0x51, 0xbe, 0x47, 0x5b, 0xdb, 0xf2, 0x74, 0xdc, 0xab,
	0x00, 0xef, 0xf5, 0xb7, 0x49, 0x1a, 0x20, 0x6a, 0x88, 0xd2, 0x00, 0xb7, 0x1a, 0x9e, 0xd2, 0x00,
	0xbf, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x42, 0x0c, 0x37, 0x4f, 0x02, 0x00, 0x00,
}
